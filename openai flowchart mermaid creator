import openai
import os
import webbrowser
import tempfile

# Make sure to set your API key correctly in your environment variables
openai.api_key = 'XXXXX'

# Function to ask user what they want to make a flowchart diagram of
def get_flowchart_description():
    description = input("What would you like to create a flowchart diagram of? Please describe the process or system: ")
    return description

# Function to ask user for the type of flowchart they want
def get_flowchart_type():
    print("\nWhat type of flowchart diagram are you interested in creating?")
    print("1. Process Flowchart")
    print("2. Workflow Diagram")
    print("3. Organizational Chart")
    print("4. Data Flow Diagram")
    print("5. Other")
    choice = input("Please type the number of your choice: ")
    return choice

# Function to create tick box list for the user's choice of flowchart diagram
def create_tick_box_list(choice):
    options = ["Process Flowchart", "Workflow Diagram", "Organizational Chart", "Data Flow Diagram", "Other"]
    ticked_options = ["[x] " + options[int(choice)-1] if str(index+1) == choice else "[ ] " + option for index, option in enumerate(options)]
    return "\n".join(ticked_options)

# Update the generate_mermaid_code function to handle more complexity
def generate_mermaid_code(description, flowchart_type):
    additional_instructions = "\nInclude conditions, loops, and multiple end points where applicable. Provide detailed steps and use clear labeling for each element."
    full_description = f"{description}{additional_instructions}"
    mermaid_code = None  # Initialize mermaid_code to None before try block
    try:
        # Call OpenAI's API with a larger max_tokens value for more complex flowcharts
        response = openai.Completion.create(
            engine="gpt-3.5-turbo-instruct",
            prompt=f"Generate mermaid code for a {flowchart_type} that describes: {full_description}",
            temperature=0.5,
            max_tokens=1500,  # Increased from 1000 to 1500
            top_p=1.0,
            frequency_penalty=0.0,
            presence_penalty=0.0,
            stop=["```"]  # The stop sequence to signal the end of a Mermaid code block in markdown
        )
        mermaid_code = response.choices[0].text.strip()
    except Exception as e:
        print(f"An error occurred: {e}")
    return mermaid_code

# Function to render the Mermaid diagram in the default web browser
def render_mermaid_diagram_in_browser(mermaid_code):
    # Create a temporary HTML file with the mermaid diagram and ensure it's closed before opening
    with tempfile.NamedTemporaryFile(delete=False, suffix='.html') as f:
        html_content = f"""
        <!DOCTYPE html>
        <html>
        <head>
        <title>Mermaid Diagram</title>
        <script src="https://cdn.jsdelivr.net/npm/mermaid@8/dist/mermaid.min.js"></script>
        <script>mermaid.initialize({{startOnLoad:true}});</script>
        </head>
        <body>
        <div class="mermaid">
        {mermaid_code}
        </div>
        </body>
        </html>
        """
        f.write(html_content.encode('utf-8'))
        temp_file_name = f.name  # Save the name for later use

    # Now that the file is closed, open it in the browser
    webbrowser.open('file://' + temp_file_name)

# Main program execution with proper error handling around the mermaid_code access
if __name__ == "__main__":
    description = get_flowchart_description()
    choice = get_flowchart_type()
    tick_box_list = create_tick_box_list(choice)
    print("\nYou have selected:\n")
    print(tick_box_list)
    # Convert choice number to flowchart type for the prompt
    flowchart_types = {"1": "Process Flowchart", "2": "Workflow Diagram", "3": "Organizational Chart", "4": "Data Flow Diagram", "5": "Other"}
    flowchart_type = flowchart_types.get(choice, "Other")
    mermaid_code = generate_mermaid_code(description, flowchart_type)
    
    if mermaid_code:
        print("\nGenerated Mermaid code:\n")
        print(mermaid_code)
        render_mermaid_diagram_in_browser(mermaid_code)
    else:
        print("Failed to generate Mermaid code.")
